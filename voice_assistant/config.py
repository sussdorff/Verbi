# voice_assistant/config.py

import os
from dotenv import load_dotenv

# Load environment variables from the .env file
load_dotenv()

class Config:
    """
    Configuration class to hold the model selection and API keys.
    
    Attributes:
    TRANSCRIPTION_MODEL (str): The model to use for transcription ('openai', 'groq', 'deepgram', 'fastwhisperapi', 'local').
    RESPONSE_MODEL (str): The model to use for response generation ('openai', 'groq', 'ollama', 'local').
    TTS_MODEL (str): The model to use for text-to-speech ('openai', 'deepgram', 'elevenlabs', 'melotts', 'cartesia', 'local').
    OPENAI_API_KEY (str): API key for OpenAI services.
    GROQ_API_KEY (str): API key for Groq services.
    DEEPGRAM_API_KEY (str): API key for Deepgram services.
    ELEVENLABS_API_KEY (str): API key for ElevenLabs services.
    CARTESIA_API_KEY (str): API key for Cartesia services.
    LOCAL_MODEL_PATH (str): Path to the local model.
    OLLAMA_LLM (str): The LLM to use for Ollama models.
    GROQ_LLM (str): The LLM to use for Groq models.
    OPENAI_LLM (str): The LLM to use for OpenAI models.
    TTS_PORT_LOCAL (int): The port to use for serving the MeloTTS model.
    INPUT_AUDIO (str): The name of the temporary file generated by the initial STT model.
    """
    # Model selection
    TRANSCRIPTION_MODEL = os.getenv("TRANSCRIPTION_MODEL", "openai")
    RESPONSE_MODEL = os.getenv("RESPONSE_MODEL", "openai")
    TTS_MODEL = os.getenv("TTS_MODEL", "elevenlabs")

    # LLM Selection
    OLLAMA_LLM = os.getenv("OLLAMA_LLM", "llama3:8b")
    GROQ_LLM = os.getenv("GROQ_LLM", "llama3-8b-8192")
    OPENAI_LLM = os.getenv("OPENAI_LLM", "gpt-4o")

    # API keys and paths
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    GROQ_API_KEY = os.getenv("GROQ_API_KEY")
    DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
    ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
    CARTESIA_API_KEY = os.getenv("CARTESIA_API_KEY")
    LOCAL_MODEL_PATH = os.getenv("LOCAL_MODEL_PATH")

    # for serving the MeloTTS model
    TTS_PORT_LOCAL = int(os.getenv("TTS_PORT_LOCAL", 5150))

    # temp file generated by the initial STT model
    INPUT_AUDIO = os.getenv("INPUT_AUDIO", "test.mp3")

    @staticmethod
    def validate_config():
        """
        Validate the configuration to ensure all necessary environment variables are set.
        
        Raises:
        ValueError: If a required environment variable is not set or has an invalid value.
        """
        valid_transcription_models = ['openai', 'groq', 'deepgram', 'fastwhisperapi', 'local']
        valid_response_models = ['openai', 'groq', 'ollama', 'local']
        valid_tts_models = ['openai', 'deepgram', 'elevenlabs', 'melotts', 'cartesia', 'local']

        if Config.TRANSCRIPTION_MODEL not in valid_transcription_models:
            raise ValueError(f"Invalid TRANSCRIPTION_MODEL. Must be one of {valid_transcription_models}")
        if Config.RESPONSE_MODEL not in valid_response_models:
            raise ValueError(f"Invalid RESPONSE_MODEL. Must be one of {valid_response_models}")
        if Config.TTS_MODEL not in valid_tts_models:
            raise ValueError(f"Invalid TTS_MODEL. Must be one of {valid_tts_models}")

        # Check for required API keys based on selected models
        if Config.TRANSCRIPTION_MODEL == 'openai' and not Config.OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY is required for OpenAI transcription model")
        if Config.TRANSCRIPTION_MODEL == 'groq' and not Config.GROQ_API_KEY:
            raise ValueError("GROQ_API_KEY is required for Groq transcription model")
        if Config.TRANSCRIPTION_MODEL == 'deepgram' and not Config.DEEPGRAM_API_KEY:
            raise ValueError("DEEPGRAM_API_KEY is required for Deepgram transcription model")

        if Config.RESPONSE_MODEL == 'openai' and not Config.OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY is required for OpenAI response model")
        if Config.RESPONSE_MODEL == 'groq' and not Config.GROQ_API_KEY:
            raise ValueError("GROQ_API_KEY is required for Groq response model")

        if Config.TTS_MODEL == 'openai' and not Config.OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY is required for OpenAI TTS model")
        if Config.TTS_MODEL == 'deepgram' and not Config.DEEPGRAM_API_KEY:
            raise ValueError("DEEPGRAM_API_KEY is required for Deepgram TTS model")
        if Config.TTS_MODEL == 'elevenlabs' and not Config.ELEVENLABS_API_KEY:
            raise ValueError("ELEVENLABS_API_KEY is required for ElevenLabs TTS model")
        if Config.TTS_MODEL == 'cartesia' and not Config.CARTESIA_API_KEY:
            raise ValueError("CARTESIA_API_KEY is required for Cartesia TTS model")

        if Config.TTS_MODEL == 'local' and not Config.LOCAL_MODEL_PATH:
            raise ValueError("LOCAL_MODEL_PATH is required for local TTS model")